---
- block:
  - name: "Create build directory"
    file:
      state: directory
      path: "{{ checkout_path }}"
    tags: setup

  - name: "Clone or pull repository"
    git:
      repo: "{{ git_repository_path }}"
      dest: "{{ checkout_path }}"
      version: "{{ branch }}"
      accept_hostkey: true
      force: yes
    tags: checkout
    when: git_repository_path is defined

  - name: "Check if a local build artifact repository exists"
    stat:
      path: "{{ git_artifact_repository_path }}"
    register: artifact_repository_exists

  - name: "Create local build artifact repository"
    command: "git init --bare {{ git_artifact_repository_path }}"
    when: artifact_repository_exists.stat.exists == False

  - name: "Fin up"
    command: "fin up"
    args:
      chdir: "{{ build_path }}"
    when: fin_up_while_build == True

  - import_tasks: "{{ hook_build_tasks | default(role_path ~ '/hooks/empty.yml') }}"

  - name: "Remove old push directory. (If one exists)"
    file:
      state: absent
      path: "{{ push_path }}"

  - name: "Copy to push directory"
    command: "rsync -a {{ checkout_path }}/ {{ push_path }} --exclude {{ push_path }}"

  - name: "Prepare commit: Register gitignores"
    shell: "find 2>/dev/null | egrep /\\.gitignore$"
    args:
      chdir: "{{ push_path }}"
    register: gitignore_to_check
    ignore_errors: yes
    tags: prepare_commit

  - name: "Prepare commit: Remove marker in gitignore \"#### BEGIN REMOVE ANDOCK-CI ...\""
    blockinfile:
      path: "{{ push_path }}/{{ item }}"
      marker: "#### {mark} REMOVE ANDOCK-CI ###"
      content: ""
    with_items: "{{ gitignore_to_check.stdout_lines }}"
    tags: prepare_commit
    no_log: true

  - name: "Prepare commit: Add git remote \"{{ git_artifact_repository_path }}\""
    command: git remote add remote "{{ git_artifact_repository_path }}" warn=no
    args:
      warn: false
      chdir: "{{ push_path }}"
    tags: prepare_commit

  - name: "Prepare commit: Remove all git folders without the root .git directory"
    shell: "ls | xargs find 2>/dev/null | egrep /\\.git$ | xargs rm -rf"
    args:
      chdir: "{{ push_path }}"
    tags: prepare_commit

  - name: "Prepare commit: git add ."
    command: git add .
    args:
      chdir: "{{ push_path }}"
    tags: prepare_commit

  - name: "Prepare commit: git config user.name"
    shell: git config user.name $(git --no-pager show -s --format='%an' HEAD)
    args:
      chdir: "{{ push_path }}"
    tags: prepare_commit

  - name: "Prepare commit: git config user.email"
    shell: git config user.email $(git --no-pager show -s --format='%ae' HEAD)
    args:
      chdir: "{{ push_path }}"
    tags: prepare_commit

  - name: "Commit files"
    shell: "git commit --allow-empty -am \"Build: {{ ansible_date_time.iso8601 }}\""
    args:
      chdir: "{{ push_path }}"
    tags: commit

  - name: "BAAAM! Push it"
    command: "git push --force remote {{ branch }}:{{ target_branch }}"
    args:
      chdir: "{{ push_path }}"
    tags: push

  always:
    - name: Stop services.
      command: "fin stop"
      args:
        warn: false
        chdir: "{{ build_path }}"
      ignore_errors: yes
      when: fin_up_while_build == True

    - name: Remove services.
      command: "fin rm -f"
      args:
        warn: false
        chdir: "{{ build_path }}"
      ignore_errors: yes
      when: fin_up_while_build == True

    - name: "Prepare clean up"
      file: dest="{{ build_path }}" mode=777  recurse=yes

    - name: "Clean up: Remove build directory"
      file:
        state: absent
        path: "{{ build_path }}"
